import streamlit as st
import pandas as pd
import plotly.graph_objects as go

st.set_page_config(layout="wide")

st.title("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –æ—Ç–¥–∞—á–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
st.write("""
–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –º—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∞ –≤ –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, —Ä–∞—Å—Ö–æ–¥—ã, –í–†–ü –∏ –¥—Ä.) —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏ –≤ –∫–∞–∂–¥–æ–º —Ä–µ–≥–∏–æ–Ω–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.
""")
st.markdown("""
### üîπ 1. –ò–¥–µ—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞

**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –æ—Ç–¥–∞—á–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (K_SEI)** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, 
–Ω–∞—Å–∫–æ–ª—å–∫–æ —Ä–æ—Å—Ç –∏–ª–∏ –æ–±—ä—ë–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª–∞–¥–∞ (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –í–†–ü –∏ —Ç.–ø.) 
—Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ–º –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ 
(—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å –∂–∏–∑–Ω—å—é, –¥–æ—Ö–æ–¥—ã, –∑–∞–Ω—è—Ç–æ—Å—Ç—å, –∂–∏–ª—å—ë –∏ —Ç.–¥.).

st.markdown("### –§–æ—Ä–º—É–ª–∞ –≤ –æ–±—â–µ–º –≤–∏–¥–µ:")
st.latex(r"K_{SEI} = \frac{I_{\mathrm{soc}}}{I_{\mathrm{econ}}}")

st.markdown("""
**–≥–¥–µ:**  
*I<sub>soc</sub>* - –∏–Ω–¥–µ–∫—Å —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞,  
*I<sub>econ</sub>* - –∏–Ω–¥–µ–∫—Å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª–∞–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞.
""", unsafe_allow_html=True)

# ======================
# Load Data
# ======================
@st.cache_data
def load_welfare_data():
    df = pd.read_csv("welfare_coeff.csv")
    # Ensure proper numeric types
    for col in df.columns:
        if col not in ["region", "year"]:
            df[col] = pd.to_numeric(df[col], errors="coerce")
    return df

df_scaled = load_welfare_data()

# ======================
# Sidebar Controls
# ======================
st.sidebar.header("Adjust Social Index Weights")
w1 = st.sidebar.slider("Employment (zan_vnedelu)", 0.0, 1.0, 0.0042, 0.001)
w2 = st.sidebar.slider("Higher Education (higher_edu)", 0.0, 1.0, 0.00066, 0.001)
w3 = st.sidebar.slider("Satisfaction (satifaction)", 0.0, 1.0, 0.9280, 0.05)
w4 = st.sidebar.slider("Total Income (total_income)", 0.0, 1.0, 0.3724, 0.05)

st.sidebar.header("Adjust Economic Index Weights")
w5 = st.sidebar.slider("GRP per capita (rgrp_capita(k))", 0.0, 1.0, 0.7622, 0.05)
w6 = st.sidebar.slider("Investment per capita (rcapinv_capita(k))", 0.0, 1.0, 0.3966, 0.05)
w7 = st.sidebar.slider("Employment in real sector (zan_realsector)", 0.0, 1.0, 0.0757, 0.05)
w8 = st.sidebar.slider("Taxes (tax(k))", 0.0, 1.0, 0.5061, 0.05)

# ======================
# Compute Indices
# ======================
df_scaled["i_soc"] = (
    w1 * df_scaled["zan_vnedelu"] +
    w2 * df_scaled["higher_edu"] +
    w3 * df_scaled["satifaction"] +
    w4 * df_scaled["total_income"]
)

df_scaled["i_econ"] = (
    w5 * df_scaled["rgrp_capita(k)"] +
    w6 * df_scaled["rcapinv_capita(k)"] +
    w7 * df_scaled["zan_realsector"] +
    w8 * df_scaled["tax(k)"]
)

df_scaled["k_sei"] = df_scaled["i_soc"] / df_scaled["i_econ"]

# ======================
# Visualization
# ======================
st.sidebar.header("Visualization Settings")
regions = ["All Regions"] + sorted(df_scaled["region"].unique().tolist())
selected_region = st.sidebar.selectbox("Select Region", regions)

fig = go.Figure()

if selected_region == "All Regions":
    for reg in df_scaled["region"].unique():
        region_data = df_scaled[df_scaled["region"] == reg].sort_values("year")
        fig.add_trace(go.Scatter(
            x=region_data["year"],
            y=region_data["k_sei"],
            mode="lines+markers",
            name=reg
        ))
else:
    region_data = df_scaled[df_scaled["region"] == selected_region].sort_values("year")
    fig.add_trace(go.Scatter(
        x=region_data["year"],
        y=region_data["k_sei"],
        mode="lines+markers",
        name=selected_region,
        line=dict(color="blue")
    ))

fig.update_layout(
    title="Welfare Coefficient (K_SEI) by Region and Year",
    xaxis_title="Year",
    yaxis_title="Welfare Coefficient (K_SEI)",
    hovermode="x unified",
    height=600
)

st.plotly_chart(fig, use_container_width=True)

# ======================
# Display Data Table
# ======================
with st.expander("Show calculated data"):
    st.dataframe(df_scaled[["region", "year", "i_soc", "i_econ", "k_sei"]])





